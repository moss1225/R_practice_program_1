1、连接键盘与显示器
* scan()
* scan() 可以用scan()从文件中读取或者使用键盘输入一个向量，它可以是数值型或者字符串列表型。
	scan("z1.txt" , what = "") # scan()函数友谊可选参数what用来设定变量的模式(mode)，默认是double模式，
	由于文件z3的内容不是数值，所以出现错误。再尝试一次，设置what=""，此举把字符串给what，表
	明我们相拥字符串模式。
	scan("z1.txt" , what = "" , sep = "\n") # sep 设置间隔符
	scan("") # 将文件名设置为空格，默认从键盘读取
	
* readline()
* 用键盘输入单行数据，用readline()函数会非常方便，
	w <- readline("")
	
* print()输出到显示器
* print是一个泛型函数，所以其实际调用的函数依赖于所打印的类别。例如，参数"table"类，那么就会调
	用print.table()函数

* cat()比print()稍微好用一点，因为后者只可以输出一个表达式，而且输出内容带标号，这可能会造成干扰
	cat("abc\n")行结束符 \n
	cat(x , "abc" , "de\n") 
	cat(x , "abc" , "de\n" , sep = "") 
	cat(x , "abc" , "de\n" , sep = c("." , "." , "." , "." , "\n" , "\n.")) 
	
2、读写文件
* read.table() # 读取数据框
	z <- read.table("z" , header = TRUE)
	z <- martrix(read.table("z" , header = TRUE) , nrow = 5 , byrow = TRUE)
	
* 读取文本文件
	z <- readlines(z1)
	
* 连接的介绍
	连接一般通过调用函数files()、url()或其他R函数创建。
	 c <- file("z1" , "r")
	readlies(c , n=1) # 逐行读取文件
	# 我们检测到代码的文件的结束符
	while(TRUE){
		rl <- radelines(c1 , n=1)
		if(length(rl) == 0){
			print("reached the end")
			break
		}else{
			pringt(rl)
		}
	}
	# 如果我们想要"倒带"，从文件开头重新读取，可以使用seek()
	c <- file("z1" , "r")
	readlines(c , n=2)
	seek(con=c , where = 0) # 指针指向文件的最开头
	
3、获取文件和目录信息
* file.info()：参数是表示文件名称的字符串向量，函数会给出每个文件的大小、创建时间、是否为目录等信息。
* dir()：返回一个字符串，列出其第一个参数指出参数制定的目录中的所有文件的名称。
* file.exists()：返回一个字符向量，表示作为第一个参数的字符串向量中给定的每个文件名是否存在。
* getwd()和setwd()：确定和改变当前工作目录

4、访问互联网
***TCP/IP概述
* 如果你不是系统的特权用户，没有足够的操作权限，但希望编写写一些服务端程序，比如用R编写，
  则必须制定一个大于1204的端口号。	
  
***R中的socket
* 有一点尤其需要注意的是，A是与B连接期间发送给B的所有字节看看作 一个整体，称
	为"长消息"（big message）。假设A先发送一行8个字符的文本，然后又发送一行20个
	字符的文本，那么对A而言，这是两行文本，但对TCP/IP而言，这只是一个28个字符的不完
	整消息、将长消息分割回若干个文本需要一些额外的工作，对于R提供共了一系列的函数来达
	到这个目标，如下所示。
	
* readLines()和writeLines()：这两个函数允许你在写程序是吧TCP/IP的消息传输当作一行一行传递的，
	尽管这并不是真实的情况。如果你要传的数据本质上就是按行分隔的，那么这个函数是非常方
	便的。
	
* serialize()和unserialize()：可以利用这两个函数传输R对象，比如矩阵或者某个统计函数的复杂输出
	结果。传输对象将在发送端转换成字符串形式，然后再接收端转换回原来的对象形式。
	
* readBin()和writeBin()这两个函数用于传输二进制的数据。

* 以上的每一个函数都可以对R中的连接进行操作，下面的例子将展示它们的用法。
	对每一个任务选择正确的函数是非常重要的。比如你有一个很长的向量，那么使用
	serialize()和unserialize()可能会更加方便，但同时也会更加耗时。这不仅因为数值与字符
	串表达式之间需要相转换，而且还因为字符串表达式通常更长，这意味这需要跟产的传输
	时间。
	
* socketConnection()：该函数可以通过socket来创建一个R连接。你可以使用参数port来设定
	端口号，然后将server参数设为TRUE或FALSE来说明是否需要创建的是服务器还是客户
	端。弱国创建的是客户端，还必须用host参数来设定服务器的IP地址。
	
* socketSelect()：该函数在服务器和多个客户端相连接时非常有用。其主要的参数
	socklist是一系列连接列表，而返回值是这些连接的一个子列表，其中的元素所表
	示的连接所提供了服务器可以去读的数据。